import json

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def load_achievements():
    with open('achievements.json', 'r', encoding='utf-8') as f:
        return json.load(f)['achievements']

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
def get_user_achievements_with_progress(user_data):
    achievements = load_achievements()
    categorized_achievements = {
        "–ü–æ—Å–∞–¥–∫–∞ –¥–µ—Ä–µ–≤—å–µ–≤": [],
        "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π": []
    }

    for achievement in achievements:
        condition = achievement['condition']
        progress = 0
        if condition['type'] == 'trees':
            progress = min(user_data['trees'], condition['value'])
            percent = int((progress / condition['value']) * 100)
            categorized_achievements["–ü–æ—Å–∞–¥–∫–∞ –¥–µ—Ä–µ–≤—å–µ–≤"].append({
                "title": achievement['title'],
                "icon": "üå≥",
                "progress": f"{progress}/{condition['value']} –¥–µ—Ä–µ–≤—å–µ–≤",
                "percent": percent
            })
        elif condition['type'] == 'referrals':
            progress = min(user_data['referrals'], condition['value'])
            percent = int((progress / condition['value']) * 100)
            categorized_achievements["–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π"].append({
                "title": achievement['title'],
                "icon": "üèÜ",
                "progress": f"{progress}/{condition['value']} –¥—Ä—É–∑–µ–π",
                "percent": percent
            })
    
    return categorized_achievements
